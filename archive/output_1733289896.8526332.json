{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'test_setup' for <Function test_change_sign_size>>\n\n    @pytest.fixture(scope='class')\n    def test_setup(request):\n        driver = None\n        browser = request.config.getoption(\"--browser\")\n        if browser == \"chrome\":\n            download_path = os.path.abspath(constants.download_path)\n            options = webdriver.ChromeOptions()\n            options.add_argument(\"disable-features=DownloadUI\")\n            options.add_experimental_option(\"prefs\", {\n                \"download.default_directory\": download_path,\n                \"plugins.plugins_disabled\": [\"Chrome PDF Viewer\"],\n                \"download.prompt_for_download\": False,\n                \"download.directory_upgrade\": True,\n                \"safebrowsing.enabled\": True\n            })\n            driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)\n        elif browser == \"firefox\":\n            download_path = os.path.abspath(constants.download_path)\n            options = webdriver.FirefoxOptions()\n            options.set_preference(\"browser.download.folderList\", 2)\n            options.set_preference(\"browser.download.manager.showWhenStarting\", False)\n            options.set_preference(\"signon.management.page.os-authKeystore\", False)\n            options.set_preference(\"browser.download.dir\", download_path)\n            options.set_preference(\"browser.helperApps.neverAsk.saveToDisk\", \"application/pdf\")\n            driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)\n        elif browser == \"edge\":\n            download_path = os.path.abspath(constants.download_path)\n            edge_options = webdriver.EdgeOptions()\n            edge_options.add_experimental_option('prefs', {\n                'download.default_directory': download_path,\n                'download.prompt_for_download': False,\n                'download.directory_upgrade': True,\n                ' safebrowsing.enabled': True\n            })\n>           driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=edge_options)\n\ntests/conftest.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.12/site-packages/selenium/webdriver/edge/webdriver.py:61: in __init__\n    super().__init__(DesiredCapabilities.EDGE['browserName'], \"ms\",\nvenv/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py:92: in __init__\n    super().__init__(\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:277: in __init__\n    self.start_session(capabilities, browser_profile)\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:370: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7c292f0f2510>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom unknown error:...\\\\n#18 0x57565365454c \\\\u003Cunknown>\\\\n#19 0x719545c9ca94 \\\\u003Cunknown>\\\\n#20 0x719545d29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from unknown error: cannot find msedge binary\nE       Stacktrace:\nE       #0 0x57565365595e <unknown>\nE       #1 0x57565310ab76 <unknown>\nE       #2 0x575653141d96 <unknown>\nE       #3 0x57565313df45 <unknown>\nE       #4 0x5756531894f2 <unknown>\nE       #5 0x57565318873f <unknown>\nE       #6 0x57565317bf83 <unknown>\nE       #7 0x57565314c01e <unknown>\nE       #8 0x57565314ccfe <unknown>\nE       #9 0x57565362a9f1 <unknown>\nE       #10 0x57565362dbee <unknown>\nE       #11 0x57565362d66b <unknown>\nE       #12 0x57565362e015 <unknown>\nE       #13 0x57565361c402 <unknown>\nE       #14 0x57565362e39d <unknown>\nE       #15 0x5756536065c5 <unknown>\nE       #16 0x575653646018 <unknown>\nE       #17 0x57565364622f <unknown>\nE       #18 0x57565365454c <unknown>\nE       #19 0x719545c9ca94 <unknown>\nE       #20 0x719545d29c3c <unknown>\n\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:247: SessionNotCreatedException\n", "test_name": "test_change_sign_size", "rerun": "0"}}, "suite_name": "tests/test_change_sign_tag_size.py"}}}, "date": "December 04, 2024", "start_time": 1733289761.0263476, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}